services:
  - type: web
    name: gst-intelligence-platform
    runtime: python
    plan: free
    
    # Build configuration with fallback dependencies
    buildCommand: |
      echo "üöÄ Starting GST Intelligence Platform build..."
      pip install --upgrade pip setuptools wheel
      
      # Install from requirements.txt with fallback to manual installation
      if [ -f requirements.txt ]; then
        echo "üì¶ Installing from requirements.txt..."
        pip install --no-cache-dir -r requirements.txt
      else
        echo "‚ö†Ô∏è requirements.txt not found, installing core dependencies..."
        pip install --no-cache-dir \
          fastapi==0.104.1 \
          uvicorn[standard]==0.24.0 \
          httpx==0.25.2 \
          jinja2==3.1.2 \
          python-multipart==0.0.6 \
          python-dotenv==1.0.0 \
          asyncpg==0.29.0 \
          beautifulsoup4==4.12.2 \
          requests==2.31.0 \
          weasyprint==60.2 \
          anthropic==0.7.7 \
          googlesearch-python==1.2.3 \
          cryptography>=3.4.8 \
          lxml==4.9.3 \
          html5lib==1.1 \
          bleach==6.1.0
      fi
      
      # Verify critical imports
      echo "üîç Verifying installation..."
      python -c "
      try:
          import fastapi, uvicorn, httpx, jinja2, asyncpg, bs4, weasyprint
          print('‚úÖ Core dependencies verified')
      except ImportError as e:
          print(f'‚ùå Import error: {e}')
          exit(1)
      "
      
      # Initialize database if init script exists
      if [ -f init_database.py ]; then
        echo "üóÑÔ∏è Initializing database..."
        python init_database.py || echo "‚ö†Ô∏è Database initialization skipped"
      fi
      
      # Create required directories
      mkdir -p static/icons static/screenshots
      echo "‚úÖ Build completed successfully"

    # Start command with proper error handling
    startCommand: |
      echo "üåü Starting GST Intelligence Platform..."
      python -c "
      import sys
      print(f'Python version: {sys.version}')
      try:
          import fastapi
          print(f'FastAPI version: {fastapi.__version__}')
      except:
          print('‚ö†Ô∏è FastAPI not found')
      "
      
      # Start the application with proper worker configuration
      python -m uvicorn main:app \
        --host 0.0.0.0 \
        --port $PORT \
        --workers 1 \
        --loop uvloop \
        --http httptools \
        --access-log \
        --log-level info \
        --timeout-keep-alive 5

    # Environment variables with validation
    envVars:
      - key: PYTHON_VERSION
        value: "3.11"
      - key: RAPIDAPI_KEY
        sync: false
        description: "RapidAPI key for GST data access"
      - key: ANTHROPIC_API_KEY
        sync: false
        description: "Anthropic API key for AI features"
      - key: RAPIDAPI_HOST
        value: "gst-return-status.p.rapidapi.com"
      - key: SECRET_KEY
        generateValue: true
        description: "Secret key for session management"
      - key: ENVIRONMENT
        value: "production"
      - key: LOG_LEVEL
        value: "INFO"
      - key: MAX_WORKERS
        value: "1"
      - key: POSTGRES_POOL_SIZE
        value: "5"

    # Health check configuration
    healthCheckPath: /health
    
    # Advanced configuration
    autoDeploy: true
    
    # Resource limits for free tier optimization
    disk:
      name: gst-platform-storage
      mountPath: /opt/render/project/src/data
      sizeGB: 1
    
    # Custom headers for security
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      - path: /static/*
        name: Cache-Control
        value: public, max-age=31536000, immutable

# Database configuration (if using Render PostgreSQL)
databases:
  - name: gst-intelligence-db
    databaseName: gstintelligence
    user: gstuser
    plan: free

# Background services (optional for future scaling)
services:
  - type: worker
    name: gst-background-tasks
    runtime: python
    plan: free
    buildCommand: |
      pip install --upgrade pip
      pip install --no-cache-dir -r requirements.txt || \
      pip install --no-cache-dir fastapi uvicorn httpx asyncpg anthropic
    startCommand: |
      echo "üîÑ Background worker ready for future tasks"
      # Future: python worker.py
      sleep 86400  # Sleep for now, activate when background jobs needed
    envVars:
      - key: WORKER_TYPE
        value: "background"
      - key: RAPIDAPI_KEY
        sync: false
      - key: ANTHROPIC_API_KEY
        sync: false