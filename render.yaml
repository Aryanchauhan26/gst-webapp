# Complete Render.com deployment configuration for GST Intelligence Platform

services:
  # Main Web Application
  - type: web
    name: gst-intelligence-platform
    runtime: python
    plan: free
    region: singapore
    
    # Build Configuration
    buildCommand: |
      echo "üöÄ Building GST Intelligence Platform..."
      
      # Upgrade pip and install dependencies
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      
      # Verify critical dependencies
      python -c "import fastapi, uvicorn, asyncpg, jinja2; print('‚úÖ Core dependencies verified')"
      
      # Initialize database if needed
      echo "üóÑÔ∏è Initializing database..."
      python init_database.py || echo "‚ö†Ô∏è Database initialization skipped (may already exist)"
      
      # Create necessary directories
      mkdir -p logs temp static/uploads
      
      # Set proper permissions
      chmod +x start.py
      
      echo "‚úÖ Build completed successfully!"
    
    # Start Command
    startCommand: |
      echo "üöÄ Starting GST Intelligence Platform..."
      python start.py --skip-checks
    
    # Environment Variables
    envVars:
      # Python Configuration
      - key: PYTHON_VERSION
        value: "3.11"
      
      - key: PYTHONPATH
        value: "."
      
      - key: PYTHONUNBUFFERED
        value: "1"
      
      # Application Configuration
      - key: APP_NAME
        value: "GST Intelligence Platform"
      
      - key: APP_VERSION
        value: "1.0.0"
      
      - key: ENVIRONMENT
        value: "production"
      
      # Server Configuration
      - key: UVICORN_HOST
        value: "0.0.0.0"
      
      - key: UVICORN_WORKERS
        value: "1"
      
      - key: LOG_LEVEL
        value: "info"
      
      # Security Configuration
      - key: SECRET_KEY
        generateValue: true
      
      # Database Configuration (using Neon.tech)
      - key: DATABASE_URL
        value: "postgresql://neondb_owner:npg_i3m7wqMeHXaW@ep-fragrant-cell-a10j16o4-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
      
      # API Configuration
      - key: RAPIDAPI_KEY
        sync: false  # Will be set manually in Render dashboard
      
      - key: ANTHROPIC_API_KEY
        sync: false  # Will be set manually in Render dashboard
      
      # Feature Flags
      - key: ENABLE_AI_FEATURES
        value: "true"
      
      - key: ENABLE_ANALYTICS
        value: "true"
      
      - key: ENABLE_RATE_LIMITING
        value: "true"
      
      # Performance Configuration
      - key: MAX_REQUEST_SIZE
        value: "10485760"  # 10MB
      
      - key: REQUEST_TIMEOUT
        value: "30"
      
      - key: DB_POOL_SIZE
        value: "10"
      
      - key: CACHE_TTL
        value: "3600"  # 1 hour
    
    # Auto-Deploy Configuration
    autoDeploy: true
    
    # Health Check
    healthCheckPath: "/health"
    
    # Resource Limits (Free tier)
    disk:
      name: gst-platform-disk
      size: 1GB
      mount: /opt/render/project/storage

  # Background Worker Service (Optional - for future use)
  - type: worker
    name: gst-platform-worker
    runtime: python
    plan: free
    region: singapore
    
    buildCommand: |
      echo "üîß Building background worker..."
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      echo "‚úÖ Worker build completed!"
    
    startCommand: |
      echo "üîÑ Starting background worker..."
      # For now, just keep the worker alive
      python -c "
      import asyncio
      import logging
      
      async def worker():
          logging.info('üîÑ Background worker started')
          while True:
              await asyncio.sleep(60)
              logging.info('üìä Worker heartbeat')
      
      asyncio.run(worker())
      "
    
    envVars:
      - key: WORKER_TYPE
        value: "background"
      
      - key: DATABASE_URL
        fromService:
          type: web
          name: gst-intelligence-platform
          envVarKey: DATABASE_URL

# Cron Jobs (Background tasks)
cronJobs:
  # Daily cleanup job
  - name: daily-cleanup
    schedule: "0 2 * * *"  # Run at 2 AM daily
    startCommand: |
      echo "üßπ Running daily cleanup..."
      python -c "
      import asyncio
      import asyncpg
      import os
      from datetime import datetime, timedelta
      
      async def cleanup():
          try:
              # Connect to database
              conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
              
              # Clean old sessions (older than 30 days)
              deleted_sessions = await conn.execute('''
                  DELETE FROM sessions 
                  WHERE expires_at < NOW() - INTERVAL '30 days'
              ''')
              
              # Clean old rate limit entries (older than 1 day)
              deleted_limits = await conn.execute('''
                  DELETE FROM rate_limits 
                  WHERE window_start < NOW() - INTERVAL '1 day'
              ''')
              
              # Clean old system logs (older than 90 days)
              deleted_logs = await conn.execute('''
                  DELETE FROM system_logs 
                  WHERE created_at < NOW() - INTERVAL '90 days'
              ''')
              
              await conn.close()
              print(f'‚úÖ Cleanup completed: {deleted_sessions} sessions, {deleted_limits} rate limits, {deleted_logs} logs')
              
          except Exception as e:
              print(f'‚ùå Cleanup failed: {e}')
      
      asyncio.run(cleanup())
      "
    
    envVars:
      - key: DATABASE_URL
        fromService:
          type: web
          name: gst-intelligence-platform
          envVarKey: DATABASE_URL

  # Weekly analytics report
  - name: weekly-report
    schedule: "0 6 * * 1"  # Run at 6 AM every Monday
    startCommand: |
      echo "üìä Generating weekly analytics report..."
      python -c "
      import asyncio
      import asyncpg
      import os
      from datetime import datetime, timedelta
      
      async def generate_report():
          try:
              conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
              
              # Get weekly statistics
              stats = await conn.fetchrow('''
                  SELECT 
                      COUNT(DISTINCT mobile) as active_users,
                      COUNT(*) as total_searches,
                      AVG(compliance_score) as avg_compliance,
                      COUNT(DISTINCT gstin) as unique_companies
                  FROM search_history 
                  WHERE searched_at >= NOW() - INTERVAL '7 days'
              ''')
              
              await conn.close()
              
              print(f'üìà Weekly Report:')
              print(f'   Active Users: {stats[\"active_users\"]}')
              print(f'   Total Searches: {stats[\"total_searches\"]}')
              print(f'   Avg Compliance: {stats[\"avg_compliance\"]:.2f}%')
              print(f'   Unique Companies: {stats[\"unique_companies\"]}')
              
          except Exception as e:
              print(f'‚ùå Report generation failed: {e}')
      
      asyncio.run(generate_report())
      "
    
    envVars:
      - key: DATABASE_URL
        fromService:
          type: web
          name: gst-intelligence-platform
          envVarKey: DATABASE_URL

# Database Configuration (External - Neon.tech)
databases:
  - name: gst-platform-db
    databaseName: neondb
    user: neondb_owner
    region: singapore
    plan: free
    # Note: Using external Neon.tech database
    # Connection string is set in environment variables

# Redis Cache (Optional - for future use)
# redis:
#   - name: gst-platform-cache
#     region: singapore
#     plan: free
#     maxMemoryPolicy: allkeys-lru

# Static Assets Configuration
staticSites:
  - name: gst-platform-docs
    buildCommand: |
      echo "üìö Building documentation..."
      mkdir -p docs
      echo "# GST Intelligence Platform Documentation" > docs/index.html
      echo "<h1>GST Intelligence Platform</h1>" >> docs/index.html
      echo "<p>API Documentation and User Guide</p>" >> docs/index.html
    
    staticSitePath: ./docs
    
    envVars:
      - key: DOCS_VERSION
        value: "1.0.0"

# Environment-specific configurations
environments:
  production:
    # Production-specific settings
    envVars:
      - key: DEBUG
        value: "false"
      
      - key: TESTING
        value: "false"
      
      - key: LOG_LEVEL
        value: "warning"
      
      - key: SENTRY_ENABLED
        value: "true"
      
      # Rate limiting (stricter in production)
      - key: RATE_LIMIT_REQUESTS
        value: "100"
      
      - key: RATE_LIMIT_WINDOW
        value: "3600"  # 1 hour
  
  staging:
    # Staging-specific settings
    envVars:
      - key: DEBUG
        value: "true"
      
      - key: TESTING
        value: "true"
      
      - key: LOG_LEVEL
        value: "debug"
      
      # More lenient rate limiting for testing
      - key: RATE_LIMIT_REQUESTS
        value: "1000"
      
      - key: RATE_LIMIT_WINDOW
        value: "3600"

# Deployment Hooks
hooks:
  # Pre-deploy hook
  preDeploy:
    - name: health-check
      command: |
        echo "üîç Pre-deployment health check..."
        python -c "
        import requests
        import os
        
        try:
            # Check if database is accessible
            import asyncpg
            print('‚úÖ Database driver available')
            
            # Check if required files exist
            required_files = ['main.py', 'requirements.txt', 'start.py']
            for file in required_files:
                if not os.path.exists(file):
                    raise Exception(f'Missing required file: {file}')
            
            print('‚úÖ Pre-deployment checks passed')
            
        except Exception as e:
            print(f'‚ùå Pre-deployment check failed: {e}')
            exit(1)
        "
  
  # Post-deploy hook
  postDeploy:
    - name: deployment-notification
      command: |
        echo "üéâ Deployment completed successfully!"
        echo "üìä Service Status:"
        echo "   - Web App: ‚úÖ Running"
        echo "   - Database: ‚úÖ Connected"
        echo "   - Health Check: ‚úÖ Passing"
        echo "üåê Application URL: $RENDER_EXTERNAL_URL"
        
        # Optional: Send notification to monitoring service
        python -c "
        import os
        from datetime import datetime
        
        print(f'üöÄ GST Intelligence Platform deployed at {datetime.now()}')
        print(f'üåê URL: {os.getenv(\"RENDER_EXTERNAL_URL\", \"Not available\")}')
        print(f'üè∑Ô∏è Commit: {os.getenv(\"RENDER_GIT_COMMIT\", \"Unknown\")}')
        "

# Monitoring and Alerting
monitoring:
  # Health check configuration
  healthCheck:
    path: "/health"
    interval: 30  # seconds
    timeout: 10   # seconds
    retries: 3
    
  # Resource monitoring
  alerts:
    - name: high_cpu_usage
      condition: cpu > 80
      duration: 300  # 5 minutes
      
    - name: high_memory_usage
      condition: memory > 80
      duration: 300  # 5 minutes
      
    - name: high_response_time
      condition: response_time > 5000  # 5 seconds
      duration: 180  # 3 minutes

# Backup Configuration
backups:
  # Database backup (handled by Neon.tech)
  database:
    enabled: true
    schedule: "0 3 * * *"  # Daily at 3 AM
    retention: 7  # Keep 7 days of backups
    
  # Application logs backup
  logs:
    enabled: true
    schedule: "0 4 * * 0"  # Weekly on Sunday at 4 AM
    retention: 30  # Keep 30 days of logs

# Security Configuration
security:
  # HTTPS enforcement
  httpsOnly: true
  
  # Security headers
  headers:
    - name: "X-Content-Type-Options"
      value: "nosniff"
      
    - name: "X-Frame-Options"
      value: "DENY"
      
    - name: "X-XSS-Protection"
      value: "1; mode=block"
      
    - name: "Strict-Transport-Security"
      value: "max-age=31536000; includeSubDomains"
      
    - name: "Content-Security-Policy"
      value: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;"
  
  # CORS configuration
  cors:
    allowedOrigins:
      - "https://gst-intelligence-platform.onrender.com"
      - "https://*.onrender.com"
    allowedMethods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"
      - "OPTIONS"
    allowedHeaders:
      - "Content-Type"
      - "Authorization"
      - "X-Requested-With"

# Scaling Configuration (for paid plans)
scaling:
  minInstances: 1
  maxInstances: 3
  
  # Auto-scaling rules
  rules:
    - metric: cpu
      threshold: 70
      scaleUp: 1
      scaleDown: 1
      cooldown: 300  # 5 minutes
      
    - metric: memory
      threshold: 80
      scaleUp: 1
      scaleDown: 1
      cooldown: 300  # 5 minutes

# Cost Optimization
costOptimization:
  # Sleep settings for free tier
  sleepAfterInactivity: 900  # 15 minutes of inactivity
  
  # Resource limits
  limits:
    cpu: "0.5"      # 0.5 CPU cores
    memory: "512Mi"  # 512 MB RAM
    storage: "1Gi"   # 1 GB storage
    
  # Efficient resource usage
  optimization:
    - enableGzip: true
    - enableCaching: true
    - minimizeStartupTime: true

# Development Configuration
development:
  # Local development settings
  localDevelopment:
    buildCommand: |
      pip install -r requirements.txt
      python init_database.py --init
      
    startCommand: |
      python start.py --dev
      
    envVars:
      - key: DEBUG
        value: "true"
      - key: RELOAD
        value: "true"

# Documentation
documentation:
  readme: |
    # GST Intelligence Platform - Render Deployment
    
    ## Features
    - üöÄ Automatic deployment from GitHub
    - üóÑÔ∏è PostgreSQL database (Neon.tech)
    - üîí Security headers and HTTPS
    - üìä Health monitoring
    - üßπ Automated cleanup jobs
    - üìà Weekly analytics reports
    
    ## Environment Variables
    Set these in Render dashboard:
    - `RAPIDAPI_KEY` - Your RapidAPI key
    - `ANTHROPIC_API_KEY` - Your Anthropic AI key
    
    ## Monitoring
    - Health check: `/health`
    - Metrics: Available in Render dashboard
    - Logs: Accessible via Render console
    
    ## Support
    For issues, check the logs in Render dashboard or GitHub repository.
  
  changelog: |
    # Changelog
    
    ## v1.0.0 (Current)
    - Initial deployment configuration
    - Complete web service setup
    - Database integration
    - Background worker
    - Automated cleanup jobs
    - Security configuration
    - Health monitoring